#parse("vm_include/init_var_entity.vm")
#set( $msg  = "${DOLLAR}msg"  )
#set( $requestData = "${DOLLAR}requestData" )
#set( $formMode = "${DOLLAR}formMode" )
#set( $errMsg = "${DOLLAR}errMsg" )
## #set( $formView = "${DOLLAR}formView" )
## #set( $listView = "${DOLLAR}listView" )

<?php
require_once 'commons/AbstractController.php';
require_once 'commons/Logger.php';
require_once 'commons/FormMode.php';
require_once 'commons/Message.php';

require_once 'entities/${entityClass}.php';
require_once 'dao/${entityClass}Dao.php';
require_once 'controller/${entityClass}Href.php';

/**
 * Controller class for "$entity.name"
 * 
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 *
 */
class ${entityControllerClass} extends AbstractController
{
    private ${DOLLAR}dao ;
    private ${DOLLAR}formView = 'view/${entityClass}Form.php';
    private ${DOLLAR}listView = 'view/${entityClass}List.php';

    /**
     * Constructor
     */
    public function __construct() {
        Logger::LOG("${entityControllerClass}: __construct()");
        parent::__construct(new ${entityHrefClass}());        
        ${this}->dao = new ${entityDaoClass}();
    }
    
    /**
     * Renders a UI LIST PAGE using the given objects
     * @param array  ${list} the list to be shown 
     * @param string ${msg}  the message to be printed
     */
    private function renderList(${list}, ${msg}) {
        if ( isset(${msg}) && isset(${list}) ) {
            // Variables exposed and usable in the view : ${list}, ${msg}, ${href}
            ${href} = ${this}->getHREF();
            require ${this}->listView ;
        }
        else {
            ${this}->error("renderList(..,..) : 'msg' and/or 'list'  undefined");
        }
    }
    
    /**
     * Renders a UI FORM PAGE in 'UPDATE' mode
     * @param object ${entityVarName}
     * @param string ${msg}
     */
    private function renderFormForUpdate(${entityVarName}, ${msg}) {
        // Variables exposed and usable in the view : ${entityVarName}, ${msg}, ${href}, ${formMode}
        ${formMode} = FormMode::UPDATE ;
        ${href} = ${this}->getHREF();
        require ${this}->formView ;
    }
    
    /**
     * Renders a UI FORM PAGE in 'CREATE' mode
     * @param object ${entityVarName}
     * @param string ${msg}
     */
    private function renderFormForCreate(${entityVarName}, ${msg}) {
        // Variables exposed and usable in the view : ${entityVarName}, ${msg}, ${href}, ${formMode}
        ${formMode} = FormMode::CREATE ;
        ${href} = ${this}->getHREF();
        require ${this}->formView ;
    }
    
    /**
     * Builds a new entity instance using the given request data
     * @param ${requestData}
     * @return ${entityClass}
     */
    private function buildEntity(${requestData}) {
        ${DOLLAR}o = new ${entityClass}();
#foreach( $attribute in $entity.attributes )
        ${DOLLAR}o->${attribute.setter}( ${requestData}['${attribute.name}'] ) ;
#end
        return ${DOLLAR}o;
    }
    
    /**
     * Validates the entity's data
     * @param ${entityClass} ${entityVarName}
     * @return string|NULL
     */
    private function validate(${entityClass} ${entityVarName}) {
        // Check id attribute(s) not null
#foreach( $attribute in $entity.keyAttributes)
        if ( ${entityVarName}->${attribute.getterWithGetPrefix}() == NULL ) return "$attribute.name is null" ;
#end
        // Check all attributes validity 
#foreach( $attribute in $entity.attributes)
#if ( $attribute.isByteType() || $attribute.isShortType() || $attribute.isIntegerType() || $attribute.isLongType() )
        if ( ! ctype_digit (${entityVarName}->${attribute.getterWithGetPrefix}() ) ) return "$attribute.name is not an integer" ;
#end
#end
        return null ;
    }
    
    /**
     * Validates the request parameters composing the entity's key
     * @param array ${requestData}
     * @return string|NULL
     */
    private function validateKey(${requestData}) {
#set( $m = "${DOLLAR}m" )
        Logger::LOG("${entityControllerClass}: validateKey()", ${requestData});
#foreach( $attribute in $entity.keyAttributes)
#set( $func = "checkNotVoid" )
#if ( $attribute.isByteType() || $attribute.isShortType() || $attribute.isIntegerType() || $attribute.isLongType() )
#set( $func = "checkInteger" )
#end
        if ( ( ${m} = ${this}->${func}(${requestData}['${attribute.name}'], "${attribute.name}") ) != null ) return ${m} ;
#end
        return null ;
    }
    
    //----------------------------------------------------------------------
    
    /**
     * {@inheritDoc}
     * @see AbstractController::list()
     */
    public function list(${requestData}) {
        Logger::LOG("${entityControllerClass}: list()", ${requestData});
        ${list} = ${this}->dao->findAll();        
        Logger::LOG("${entityControllerClass}: list() DAO result : ", ${list});
        ${this}->renderList(${list}, ""); // OK
    }
    
    /**
     * {@inheritDoc}
     * @see AbstractController::formForCreate()
     */
    public function formForCreate() {
        Logger::LOG("${entityControllerClass}: formForCreate()");
        ${entityVarName} = new ${entityClass}();
        ${this}->renderFormForCreate(${entityVarName}, "");
    }
    
    /**
     * {@inheritDoc}
     * @see AbstractController::formForUpdate()
     */
    public function formForUpdate(${requestData}) {
        Logger::LOG("${entityControllerClass}: formForUpdate()", ${requestData});
        ${errMsg} = ${this}->validateKey(${requestData});
        if ( ${errMsg} == NULL ) {
            // Validation OK
#set( $tmp = "" )
#foreach( $attribute in $entity.keyAttributes)
#if( $foreach.count > 1 )
#set( $tmp = $tmp + ", " )
#else
#set( $tmp = $tmp + "${requestData}['${attribute.name}']" )
#end
#end
            ${entityVarName} = ${this}->dao->findById( ${tmp} );
            if ( ${entityVarName} != null ) {
                // Found
                ${this}->renderFormForUpdate(${entityVarName}, ""); // OK, switch to 'update' form
            }
            else {
                // Unexpected error
                ${this}->error("${entityClass} not found !");
            }
        }
        else {
            // Unexpected error
            ${this}->error(${errMsg});
        }
    }

    /**
     * {@inheritDoc}
     * @see AbstractController::create()
     */
    public function create(${requestData}) {
        Logger::LOG("${entityControllerClass}: create()", ${requestData});
        ${entityVarName} = ${this}->buildEntity(${requestData});
        ${DOLLAR}idString = ${entityVarName}->getIdAsString();
        ${errMsg} = ${this}->validate(${entityVarName});
        if ( ${errMsg} == NULL ) {
            // Validation OK
            if ( ${this}->dao->create(${entityVarName}) ) {
                ${msg} = new Message( "${entityClass} '" . ${DOLLAR}idString . "' created", Message::OK  );
                ${this}->renderFormForUpdate(${entityVarName}, ${msg}); // Switch to the 'update' form
            }
            else {
                ${msg} = new Message( "${entityClass} '" . ${DOLLAR}idString . "' not created", Message::WARN );
                ${this}->renderFormForCreate(${entityVarName}, ${msg}); // Stay on the 'create' form
            }
        }
        else {
            ${msg} = new Message(${errMsg}, Message::ERR );
            ${this}->renderFormForCreate(${entityVarName}, ${msg}); // Stay on the 'create' form
        }
    }
    
    /**
     * {@inheritDoc}
     * @see AbstractController::update()
     */
    public function update(${requestData}) {
        Logger::LOG("${entityControllerClass}: update()", ${requestData});
        ${entityVarName} = ${this}->buildEntity(${requestData});
        ${DOLLAR}idString = ${entityVarName}->getIdAsString();
        ${errMsg} = ${this}->validate(${entityVarName});
        if ( ${errMsg} == NULL ) {
            // Validation OK 
            if ( ${this}->dao->update(${entityVarName}) ) {
                ${msg} = new Message( "${entityClass} '" . ${DOLLAR}idString . "' updated", Message::OK ) ;
            }
            else {
                ${msg} = new Message( "${entityClass} '" . ${DOLLAR}idString . "' not found", Message::WARN ) ;
            }
        }
        else {
            ${msg} = new Message(${errMsg}, Message::ERR );
        }
        ${this}->renderFormForUpdate(${entityVarName}, ${msg});
    }

    /**
     * {@inheritDoc}
     * @see AbstractController::delete()
     */
    public function delete(${requestData}) {
        Logger::LOG("${entityControllerClass}: delete()", ${requestData});
#set( $tmp = "" )
#foreach( $attribute in $entity.keyAttributes)
#if( $foreach.count > 1 )
#set( $tmp = $tmp + ", " )
#else
#set( $tmp = $tmp + "${requestData}['${attribute.name}']" )
#end
#end
        ${DOLLAR}idString = ${entityClass}::buildIdString(${tmp});
        if ( ${this}->dao->delete(${tmp}) ) {
            ${msg} = new Message("${entityClass} '" . ${DOLLAR}idString . "' deleted", Message::OK ) ;
        }
        else {
            ${msg} = new Message("${entityClass} '" . ${DOLLAR}idString . "' not found", Message::WARN ) ;
        }
        // Switch to list page
        ${list} = ${this}->dao->findAll();
        ${this}->renderList(${list}, ${msg}); 
    }

}
?>
