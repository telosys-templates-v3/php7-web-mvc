#parse("vm_include/init_var_entity.vm")
<?php
/**
 * Entity class for "$entity.name"
 * 
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 *
 */

class $entityClass 
{
#foreach( $attribute in $entity.attributes )
    private ${DOLLAR}${attribute.name} ; // $attribute.neutralType
#end
         
    /**
     * Constructor
     */
    public function __construct() {
#foreach( $attribute in $entity.attributes )
        ${this}->${attribute.name} = "" ;
## TODO        ${this}->${attribute.name} = $attribute.defaultValue ;
#end
    }
     
#foreach( $attribute in $entity.attributes )
#set( $aCap = ${fn.capitalize($attribute.name)} )
    public function ${attribute.getterWithGetPrefix}() {
        return ${this}->${attribute.name};
    }
    public function ${attribute.setter}(${DOLLAR}${attribute.name}) {
        ${this}->${attribute.name} = ${DOLLAR}${attribute.name};
    }

#end

    /**
     * Standard 'toString' method
     * @return string
     */
    public function __toString() {
        ${DOLLAR}result = "" ;
#foreach( $attribute in $entity.attributes )
        ${DOLLAR}result .= ${this}->${attribute.name} ;
#end
        return ${DOLLAR}result;
    }

    /**
     * Returns the id attribute(s) in a string
     * @return string
     */
    public function getIdAsString() {
#set( $tmp = "" )
#foreach( $attribute in $entity.keyAttributes)
#if( $foreach.count > 1 )
#set( $tmp = $tmp + ", " )
#else
#set( $tmp = $tmp + "${this}->${attribute.name}" )
#end
#end
        return ${entityClass}::buildIdString($tmp);
    }
    

    /**
     * Builds string containing id attribute(s)
#foreach( $attribute in $entity.keyAttributes )
     * @param ${DOLLAR}${attribute.name}
#end
     * @return string
     */
    public static function buildIdString(${entityKeyAttributes}) {
		${DOLLAR}r = "" ;
#foreach( $attribute in $entity.keyAttributes)
#if( $foreach.count < 2 )
		${DOLLAR}r .= ${DOLLAR}${attribute.name} ; // first
#else
		${DOLLAR}r .= "|" . ${DOLLAR}${attribute.name} ; // others
#end
        return ${DOLLAR}r ;
#end
    }

}
?>
